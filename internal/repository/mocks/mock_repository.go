// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "XTechProject/internal/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositorier is a mock of Repositorier interface.
type MockRepositorier struct {
	ctrl     *gomock.Controller
	recorder *MockRepositorierMockRecorder
}

// MockRepositorierMockRecorder is the mock recorder for MockRepositorier.
type MockRepositorierMockRecorder struct {
	mock *MockRepositorier
}

// NewMockRepositorier creates a new mock instance.
func NewMockRepositorier(ctrl *gomock.Controller) *MockRepositorier {
	mock := &MockRepositorier{ctrl: ctrl}
	mock.recorder = &MockRepositorierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositorier) EXPECT() *MockRepositorierMockRecorder {
	return m.recorder
}

// CreateBTCRecord mocks base method.
func (m *MockRepositorier) CreateBTCRecord(model *models.BTC) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBTCRecord", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBTCRecord indicates an expected call of CreateBTCRecord.
func (mr *MockRepositorierMockRecorder) CreateBTCRecord(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBTCRecord", reflect.TypeOf((*MockRepositorier)(nil).CreateBTCRecord), model)
}

// CreateFiatRecord mocks base method.
func (m *MockRepositorier) CreateFiatRecord(model *models.Fiat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFiatRecord", model)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFiatRecord indicates an expected call of CreateFiatRecord.
func (mr *MockRepositorierMockRecorder) CreateFiatRecord(model interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFiatRecord", reflect.TypeOf((*MockRepositorier)(nil).CreateFiatRecord), model)
}

// GetAllBTC mocks base method.
func (m *MockRepositorier) GetAllBTC(limit, offset int, orderBy string) ([]models.BTC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBTC", limit, offset, orderBy)
	ret0, _ := ret[0].([]models.BTC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBTC indicates an expected call of GetAllBTC.
func (mr *MockRepositorierMockRecorder) GetAllBTC(limit, offset, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBTC", reflect.TypeOf((*MockRepositorier)(nil).GetAllBTC), limit, offset, orderBy)
}

// GetAllFiat mocks base method.
func (m *MockRepositorier) GetAllFiat(limit, offset int, orderBy string) ([]models.Fiat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllFiat", limit, offset, orderBy)
	ret0, _ := ret[0].([]models.Fiat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllFiat indicates an expected call of GetAllFiat.
func (mr *MockRepositorierMockRecorder) GetAllFiat(limit, offset, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllFiat", reflect.TypeOf((*MockRepositorier)(nil).GetAllFiat), limit, offset, orderBy)
}

// GetLastBTC mocks base method.
func (m *MockRepositorier) GetLastBTC() (*models.BTC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBTC")
	ret0, _ := ret[0].(*models.BTC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBTC indicates an expected call of GetLastBTC.
func (mr *MockRepositorierMockRecorder) GetLastBTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBTC", reflect.TypeOf((*MockRepositorier)(nil).GetLastBTC))
}

// GetLastDateForFiat mocks base method.
func (m *MockRepositorier) GetLastDateForFiat() (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastDateForFiat")
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastDateForFiat indicates an expected call of GetLastDateForFiat.
func (mr *MockRepositorierMockRecorder) GetLastDateForFiat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastDateForFiat", reflect.TypeOf((*MockRepositorier)(nil).GetLastDateForFiat))
}

// GetLastFiat mocks base method.
func (m *MockRepositorier) GetLastFiat() (*models.Fiat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFiat")
	ret0, _ := ret[0].(*models.Fiat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastFiat indicates an expected call of GetLastFiat.
func (mr *MockRepositorierMockRecorder) GetLastFiat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFiat", reflect.TypeOf((*MockRepositorier)(nil).GetLastFiat))
}

// SetAllRecordsFiatLatestFalse mocks base method.
func (m *MockRepositorier) SetAllRecordsFiatLatestFalse() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAllRecordsFiatLatestFalse")
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAllRecordsFiatLatestFalse indicates an expected call of SetAllRecordsFiatLatestFalse.
func (mr *MockRepositorierMockRecorder) SetAllRecordsFiatLatestFalse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAllRecordsFiatLatestFalse", reflect.TypeOf((*MockRepositorier)(nil).SetAllRecordsFiatLatestFalse))
}

// UpdateLastRecordForBTC mocks base method.
func (m *MockRepositorier) UpdateLastRecordForBTC() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastRecordForBTC")
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastRecordForBTC indicates an expected call of UpdateLastRecordForBTC.
func (mr *MockRepositorierMockRecorder) UpdateLastRecordForBTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastRecordForBTC", reflect.TypeOf((*MockRepositorier)(nil).UpdateLastRecordForBTC))
}
