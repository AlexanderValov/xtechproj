// Code generated by MockGen. DO NOT EDIT.
// Source: internal/services/service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "XTechProject/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// CheckLastDateUpdatingFiatCurrencies mocks base method.
func (m *MockServicer) CheckLastDateUpdatingFiatCurrencies() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLastDateUpdatingFiatCurrencies")
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckLastDateUpdatingFiatCurrencies indicates an expected call of CheckLastDateUpdatingFiatCurrencies.
func (mr *MockServicerMockRecorder) CheckLastDateUpdatingFiatCurrencies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLastDateUpdatingFiatCurrencies", reflect.TypeOf((*MockServicer)(nil).CheckLastDateUpdatingFiatCurrencies))
}

// GetAllBTC mocks base method.
func (m *MockServicer) GetAllBTC(limit, offset int, orderBy string) ([]models.BTC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBTC", limit, offset, orderBy)
	ret0, _ := ret[0].([]models.BTC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBTC indicates an expected call of GetAllBTC.
func (mr *MockServicerMockRecorder) GetAllBTC(limit, offset, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBTC", reflect.TypeOf((*MockServicer)(nil).GetAllBTC), limit, offset, orderBy)
}

// GetBTCToFiat mocks base method.
func (m *MockServicer) GetBTCToFiat(btc *models.BTC) (*map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBTCToFiat", btc)
	ret0, _ := ret[0].(*map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBTCToFiat indicates an expected call of GetBTCToFiat.
func (mr *MockServicerMockRecorder) GetBTCToFiat(btc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBTCToFiat", reflect.TypeOf((*MockServicer)(nil).GetBTCToFiat), btc)
}

// GetFiatHistory mocks base method.
func (m *MockServicer) GetFiatHistory(limit, offset int, orderBy string) ([]models.Fiat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatHistory", limit, offset, orderBy)
	ret0, _ := ret[0].([]models.Fiat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatHistory indicates an expected call of GetFiatHistory.
func (mr *MockServicerMockRecorder) GetFiatHistory(limit, offset, orderBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatHistory", reflect.TypeOf((*MockServicer)(nil).GetFiatHistory), limit, offset, orderBy)
}

// GetLastBTC mocks base method.
func (m *MockServicer) GetLastBTC() (*models.BTC, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastBTC")
	ret0, _ := ret[0].(*models.BTC)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastBTC indicates an expected call of GetLastBTC.
func (mr *MockServicerMockRecorder) GetLastBTC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastBTC", reflect.TypeOf((*MockServicer)(nil).GetLastBTC))
}

// GetLastFiat mocks base method.
func (m *MockServicer) GetLastFiat() (*models.Fiat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFiat")
	ret0, _ := ret[0].(*models.Fiat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastFiat indicates an expected call of GetLastFiat.
func (mr *MockServicerMockRecorder) GetLastFiat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFiat", reflect.TypeOf((*MockServicer)(nil).GetLastFiat))
}

// UpdateBTCInDB mocks base method.
func (m *MockServicer) UpdateBTCInDB(unixTime int64, lastValue string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBTCInDB", unixTime, lastValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBTCInDB indicates an expected call of UpdateBTCInDB.
func (mr *MockServicerMockRecorder) UpdateBTCInDB(unixTime, lastValue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBTCInDB", reflect.TypeOf((*MockServicer)(nil).UpdateBTCInDB), unixTime, lastValue)
}
